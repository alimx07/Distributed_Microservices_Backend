// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: post.proto

package services_bindings_go

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PostSerive_CreatePost_FullMethodName    = "/PostSerive/CreatePost"
	PostSerive_CreateComment_FullMethodName = "/PostSerive/CreateComment"
	PostSerive_CreateLike_FullMethodName    = "/PostSerive/CreateLike"
	PostSerive_DeletePost_FullMethodName    = "/PostSerive/DeletePost"
	PostSerive_DeleteComment_FullMethodName = "/PostSerive/DeleteComment"
	PostSerive_DeleteLike_FullMethodName    = "/PostSerive/DeleteLike"
	PostSerive_GetPosts_FullMethodName      = "/PostSerive/GetPosts"
)

// PostSeriveClient is the client API for PostSerive service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PostSeriveClient interface {
	CreatePost(ctx context.Context, in *Post, opts ...grpc.CallOption) (*Response, error)
	CreateComment(ctx context.Context, in *Comment, opts ...grpc.CallOption) (*Response, error)
	CreateLike(ctx context.Context, in *Like, opts ...grpc.CallOption) (*Response, error)
	DeletePost(ctx context.Context, in *DeletePostRequest, opts ...grpc.CallOption) (*Response, error)
	DeleteComment(ctx context.Context, in *DeleteCommentRequest, opts ...grpc.CallOption) (*Response, error)
	DeleteLike(ctx context.Context, in *DeleteLikeRequest, opts ...grpc.CallOption) (*Response, error)
	GetPosts(ctx context.Context, in *GetPostRequest, opts ...grpc.CallOption) (*GetPostResponse, error)
}

type postSeriveClient struct {
	cc grpc.ClientConnInterface
}

func NewPostSeriveClient(cc grpc.ClientConnInterface) PostSeriveClient {
	return &postSeriveClient{cc}
}

func (c *postSeriveClient) CreatePost(ctx context.Context, in *Post, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, PostSerive_CreatePost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postSeriveClient) CreateComment(ctx context.Context, in *Comment, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, PostSerive_CreateComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postSeriveClient) CreateLike(ctx context.Context, in *Like, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, PostSerive_CreateLike_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postSeriveClient) DeletePost(ctx context.Context, in *DeletePostRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, PostSerive_DeletePost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postSeriveClient) DeleteComment(ctx context.Context, in *DeleteCommentRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, PostSerive_DeleteComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postSeriveClient) DeleteLike(ctx context.Context, in *DeleteLikeRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, PostSerive_DeleteLike_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postSeriveClient) GetPosts(ctx context.Context, in *GetPostRequest, opts ...grpc.CallOption) (*GetPostResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPostResponse)
	err := c.cc.Invoke(ctx, PostSerive_GetPosts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PostSeriveServer is the server API for PostSerive service.
// All implementations must embed UnimplementedPostSeriveServer
// for forward compatibility.
type PostSeriveServer interface {
	CreatePost(context.Context, *Post) (*Response, error)
	CreateComment(context.Context, *Comment) (*Response, error)
	CreateLike(context.Context, *Like) (*Response, error)
	DeletePost(context.Context, *DeletePostRequest) (*Response, error)
	DeleteComment(context.Context, *DeleteCommentRequest) (*Response, error)
	DeleteLike(context.Context, *DeleteLikeRequest) (*Response, error)
	GetPosts(context.Context, *GetPostRequest) (*GetPostResponse, error)
	mustEmbedUnimplementedPostSeriveServer()
}

// UnimplementedPostSeriveServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPostSeriveServer struct{}

func (UnimplementedPostSeriveServer) CreatePost(context.Context, *Post) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePost not implemented")
}
func (UnimplementedPostSeriveServer) CreateComment(context.Context, *Comment) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateComment not implemented")
}
func (UnimplementedPostSeriveServer) CreateLike(context.Context, *Like) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLike not implemented")
}
func (UnimplementedPostSeriveServer) DeletePost(context.Context, *DeletePostRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePost not implemented")
}
func (UnimplementedPostSeriveServer) DeleteComment(context.Context, *DeleteCommentRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteComment not implemented")
}
func (UnimplementedPostSeriveServer) DeleteLike(context.Context, *DeleteLikeRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLike not implemented")
}
func (UnimplementedPostSeriveServer) GetPosts(context.Context, *GetPostRequest) (*GetPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPosts not implemented")
}
func (UnimplementedPostSeriveServer) mustEmbedUnimplementedPostSeriveServer() {}
func (UnimplementedPostSeriveServer) testEmbeddedByValue()                    {}

// UnsafePostSeriveServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PostSeriveServer will
// result in compilation errors.
type UnsafePostSeriveServer interface {
	mustEmbedUnimplementedPostSeriveServer()
}

func RegisterPostSeriveServer(s grpc.ServiceRegistrar, srv PostSeriveServer) {
	// If the following call pancis, it indicates UnimplementedPostSeriveServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PostSerive_ServiceDesc, srv)
}

func _PostSerive_CreatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Post)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostSeriveServer).CreatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostSerive_CreatePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostSeriveServer).CreatePost(ctx, req.(*Post))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostSerive_CreateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Comment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostSeriveServer).CreateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostSerive_CreateComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostSeriveServer).CreateComment(ctx, req.(*Comment))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostSerive_CreateLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Like)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostSeriveServer).CreateLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostSerive_CreateLike_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostSeriveServer).CreateLike(ctx, req.(*Like))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostSerive_DeletePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostSeriveServer).DeletePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostSerive_DeletePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostSeriveServer).DeletePost(ctx, req.(*DeletePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostSerive_DeleteComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostSeriveServer).DeleteComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostSerive_DeleteComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostSeriveServer).DeleteComment(ctx, req.(*DeleteCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostSerive_DeleteLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLikeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostSeriveServer).DeleteLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostSerive_DeleteLike_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostSeriveServer).DeleteLike(ctx, req.(*DeleteLikeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostSerive_GetPosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostSeriveServer).GetPosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostSerive_GetPosts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostSeriveServer).GetPosts(ctx, req.(*GetPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PostSerive_ServiceDesc is the grpc.ServiceDesc for PostSerive service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PostSerive_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "PostSerive",
	HandlerType: (*PostSeriveServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePost",
			Handler:    _PostSerive_CreatePost_Handler,
		},
		{
			MethodName: "CreateComment",
			Handler:    _PostSerive_CreateComment_Handler,
		},
		{
			MethodName: "CreateLike",
			Handler:    _PostSerive_CreateLike_Handler,
		},
		{
			MethodName: "DeletePost",
			Handler:    _PostSerive_DeletePost_Handler,
		},
		{
			MethodName: "DeleteComment",
			Handler:    _PostSerive_DeleteComment_Handler,
		},
		{
			MethodName: "DeleteLike",
			Handler:    _PostSerive_DeleteLike_Handler,
		},
		{
			MethodName: "GetPosts",
			Handler:    _PostSerive_GetPosts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "post.proto",
}
